package binarysearch;

public class Rotationcount {
	int[] arr = {4,5,6,7,0,1,2};
  //  System.out.println(countRotations(arr));
//}

private static int countRotations(int[] arr) {
    int pivot = findPivot(arr);
    return pivot + 1;
    
}
// use this for non duplicates 
static int findPivot(int [] arr) {
	int start = 0;
	int end = arr.length-1;
	while(start<=end ) {
		int mid = start +(end - start)/2;
		// 4 cases over hear
		if(mid <end &&arr[mid]>arr[mid+1]) {
			return mid;
		}
		if(mid>start&&arr[mid]<arr[mid-1]) {
			return mid-1;
		}
		if(arr[mid]<=arr[start]) {
			end = mid -1;
			
		}else {
			start = mid +1;
			
		}
			
		}
	return -1;
	}


// use this for  duplicate
static int findPivotwithDuplicates(int [] arr) {
	int start = 0;
	int end = arr.length-1;
	while(start<=end) {
		int mid = start +(end - start)/2;
		// appy 4 cases to finf the duplicates number
		if( mid<end &&arr[mid]>arr[mid+1]) {
			return mid;
		}
			if(mid>end &&arr[mid]<arr[mid-1]) {
				return mid-1;
				
			}
			// if the element at  middle, start ,end are eqaual then skips the duplicates
		
	if(arr[mid]==arr[start]&&arr[mid]==arr[end]) {
		// skip the duplicates 
		// what if the start and end are pivot
		// chck if the start  is pivot
		if(arr[start]>arr[start+1]) {
			return start;
		}
		start++;
		// check wether the end is pivot
		if(arr[end]<arr[end -1]) {
	return end;
		}
		end ++;
		
			
		}
	// left side is sorted then tne pivot is in right
	  else if(arr[start] < arr[mid] || (arr[start] == arr[mid] && arr[mid] > arr[end])) {
          start = mid + 1;
      } else {
          end = mid - 1;
      }
  }
  return -1;
}

	}
	}
}
}
